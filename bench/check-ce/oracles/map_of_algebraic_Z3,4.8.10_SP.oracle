<check_ce:categorization>Categorizations of models:
- Selected model 0: NC
  - Concrete RAC: FAILURE (precondition at "bench/check-ce/map_of_algebraic.mlw", line 34, characters 4-16)
  - Abstract RAC: FAILURE (precondition at "bench/check-ce/map_of_algebraic.mlw", line 34, characters 4-16)
- Checked model 1: NC
  - Concrete RAC: FAILURE (precondition at "bench/check-ce/map_of_algebraic.mlw", line 34, characters 4-16)
  - Abstract RAC: FAILURE (precondition at "bench/check-ce/map_of_algebraic.mlw", line 34, characters 4-16)
File "bench/check-ce/map_of_algebraic.mlw", line 34, characters 4-16:
Sub-goal Precondition of goal not_valid'vc.
Prover result is: Unknown (sat) (1418 steps).
The program does not comply to the verification goal, for example during the
  following execution:
File map_of_algebraic.mlw:
  Line 33:
    m =
      { block_size = fun (x!0:int) -> (0:t);
        mem_access_address =
          fun (x!0:int) -> if x!0 = 2 then Freeable else Freeable }
    x = { base_addr = 2; offset = (0:t) }
    m =
      { block_size = fun (x!0:int) -> (0:t);
        mem_access_address =
          fun (x!0:int) -> if x!0 = 2 then Freeable else Freeable }
    x = { base_addr = 2; offset = (0:t) }
    Execution of main function `not_valid` with env:
      { lsenv = [];
        vsenv =
          [ m = { block_size = fun (x!0:int) -> (0:t);
                  mem_access_address =
                    fun (x!0:int) -> if x!0 = 2 then Freeable else Freeable },
            x = { base_addr = 2; offset = (0:t) } ]; rsenv = []; idenv = [] }
  Line 34:
    (giant-step) execution of unimplemented function `load_val` with args:
      [ m = { block_size = fun (x!0:int) -> (0:t);
              mem_access_address =
                fun (x!0:int) -> if x!0 = 2 then Freeable else Freeable },
        x = { base_addr = 2; offset = (0:t) } ]
    Property failure at precondition of `load_val` with env:
      { lsenv = [];
        vsenv =
          [ m = { block_size = fun (x!0:int) -> (0:t);
                  mem_access_address =
                    fun (x!0:int) -> if x!0 = 2 then Freeable else Freeable },
            x = { base_addr = 2; offset = (0:t) },
            m = { block_size = fun (x!0:int) -> (0:t);
                  mem_access_address =
                    fun (x!0:int) -> if x!0 = 2 then Freeable else Freeable },
            x = { base_addr = 2; offset = (0:t) } ]; rsenv = [];
        idenv =
          [ Writable = UNDEFINED,
            m = { block_size = fun (x!0:int) -> (0:t);
                  mem_access_address =
                    fun (x!0:int) -> if x!0 = 2 then Freeable else Freeable },
            x = { base_addr = 2; offset = (0:t) } ] }

